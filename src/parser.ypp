%skeleton "lalr1.cc"
%require "3.0.4"
%defines
%define parser_class_name {lisplike_parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires
{
#include <memory>
#include <vector>
#include <string>
#include "ast.hpp"
class lisplike_driver;
}

// Params that are passed to the parser and lexer
%param { lisplike_driver& driver }

%locations
%initial-action
{
    // Initialize the initial location
    @$.begin.filename = @$.end.filename = &driver.streamname;
}

%define parse.trace
%define parse.error verbose

%code
{
#include "driver.hpp"
#include "scanner.hpp"
#undef yylex
#define yylex driver.lexer->lex
}


%define api.token.prefix {TOK_}
%token
    END     0   "end of file"
    EQUALS      "="
    LPAREN      "("
    RPAREN      ")"
    SQUOT       "'"
    DOT         "."
    FUN_KEYW    "fun"
    LET_KEYW    "let"
    LETM_KEYW   "letm"
    SET_KEYW    "set"
    IF_KEYW     "if"
    INC_KEYW    "inc"
    NATIVE_KEYW "native"
    NONE_KEYW   "none"
;
%token <std::string> IDENTIFIER "identifier"
%token <double> NUMBER          "number"
%token <std::string> STRING     "string"
%token <std::string> COND_SYM   "cond_sym"
%token <std::string> MATH_OP    "math_op"

%type <ll_inc_list> inc_section
%type <ll_inc_list> inc_list
%type <ll_inc_p> inc

%type <ll_children> exp_list
%type <ll_tree_p> exp
%type <ll_funcall_exp_p> funcall_exp
%type <ll_fundecl_exp_p> fundecl_exp
%type <ll_let_exp_p> let_exp
%type <ll_set_exp_p> set_exp
%type <ll_if_exp_p> if_exp
%type <ll_bool_exp_p> bool_exp
%type <ll_math_exp_p> math_exp
%type <ll_block_exp_p> block_exp

%type <ll_children> term_list
%type <ll_term_p> term

%type <std::string> qualified_name
%type <std::string> qualified_name_tail
%type <ll_children> list
%type <std::string> none
%type <std::string> unpacked_string

%printer { yyoutput << $$; } <*>;

%%

%start unit;

unit
    : inc_section exp_list { 
        driver.includes = $1;
        driver.ast = $2;
    }
    ;

inc_section
    : EQUALS INC_KEYW inc_list EQUALS inc_section  {
        $5.insert($3.begin(), $3.end());
        $$ = $5;
    }
    | EQUALS inc inc_section {
        $3.insert($2);
        $$ = $3;
    }
    | %empty { $$ = ll_inc_list(); }
    ;

inc_list
    : inc inc_list { 
        $2.insert($1);
        $$ = $2;
    }
    | %empty { $$ = ll_inc_list(); }
    ;

inc
    : unpacked_string {
        $$ = std::make_shared<ll_inc>(ll_inc(false, $1));
    }
    | NATIVE_KEYW unpacked_string {
        $$ = std::make_shared<ll_inc>(ll_inc(true, $2));
    }

exp_list
    : exp exp_list {
        $2.insert($2.begin(), $1);
        $$ = $2;
    }
    | %empty       { $$ = ll_children(); }

exp
    : funcall_exp   { $$ = $1; }
    | fundecl_exp   { $$ = $1; }
    | let_exp       { $$ = $1; }
    | set_exp       { $$ = $1; }
    | if_exp        { $$ = $1; }
    | bool_exp      { $$ = $1; }
    | math_exp      { $$ = $1; }
    | block_exp     { $$ = $1; }
    ;

funcall_exp
    : LPAREN qualified_name term_list RPAREN {
        $$ = std::make_shared<ll_funcall_exp>(ll_funcall_exp($2, $3));
    }
    ;

fundecl_exp
    : LPAREN FUN_KEYW IDENTIFIER list term RPAREN {
        $$ = std::make_shared<ll_fundecl_exp>(ll_fundecl_exp($3, $4, $5));
    }
    ;

let_exp
    : LPAREN LET_KEYW qualified_name term RPAREN { 
        $$ = std::make_shared<ll_let_exp>(ll_let_exp(false, $3, $4));
    }
    | LPAREN LETM_KEYW qualified_name term RPAREN {
        $$ = std::make_shared<ll_let_exp>(ll_let_exp(true, $3, $4));
    }
    ;

set_exp
    : LPAREN SET_KEYW qualified_name term RPAREN { 
        $$ = std::make_shared<ll_set_exp>(ll_set_exp($3, $4));
    }
    ;

if_exp
    /* TODO : restrict fundecl expressions */
    : LPAREN IF_KEYW exp term term RPAREN {
        $$ = std::make_shared<ll_if_exp>(ll_if_exp($3, $4, $5));
    }
    ;

bool_exp
    : LPAREN COND_SYM term term RPAREN {
        $$ = std::make_shared<ll_bool_exp>(ll_bool_exp($2, $3, $4));
    }
    ;

math_exp
    : LPAREN MATH_OP term_list RPAREN {
        if($3.size() < 2)
            driver.error(driver.lexer->loc, "math expression requires at least two arguments");
        $$ = std::make_shared<ll_math_exp>(ll_math_exp($2, $3));
    }

block_exp
    : LPAREN exp_list RPAREN {
        $$ = std::make_shared<ll_block_exp>(ll_block_exp($2));
    }

term_list 
    : term term_list { 
        $2.insert($2.begin(), $1);
        $$ = $2;
    }
    | %empty { $$ = ll_children(); }
    ;

term
    : exp           { $$ = std::make_shared<ll_term>(ll_term($1)); }
    | list          { $$ = std::make_shared<ll_term>(ll_term($1)); }
/*  | dict          { $$ = std::make_shared<ll_term>(ll_term($1)); } */
    | none          { $$ = std::make_shared<ll_term>(ll_term($1)); }
    | qualified_name{ $$ = std::make_shared<ll_term>(ll_term($1)); }
    | NUMBER        { $$ = std::make_shared<ll_term>(ll_term($1)); }
    | STRING        { $$ = std::make_shared<ll_term>(ll_term($1)); }
    ;

qualified_name
    : IDENTIFIER qualified_name_tail
                    { $$ = $1 + $2; }
    ;

qualified_name_tail
    : DOT IDENTIFIER qualified_name_tail
                    { $$ = "[\"" + $2 + "\"]" + $3; }
    | %empty        { $$ = std::string(); }
    ;

list
    : SQUOT LPAREN term_list RPAREN { $$ = $3; }
    ;
/*
dict
    :
    ;
*/
none: NONE_KEYW { $$ = "ll_value()"; }
    ;

unpacked_string
    : STRING { $$ = trim($1, [](int i){ return i == '"'; }); }
    ;

%%

void yy::lisplike_parser::error(const location_type& l, const std::string& m)
{
    driver.error(l, m);
}
