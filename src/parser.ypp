%skeleton "lalr1.cc"
%require "3.0.4"
%defines
%define parser_class_name {lisplike_parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires
{
#include <vector>
#include <string>
#include "ll_type.hpp"
class lisplike_driver;
}

// Params that are passed to the parser and lexer
%param { lisplike_driver& driver }

%locations
%initial-action
{
  // Initialize the initial location
  @$.begin.filename = @$.end.filename = &driver.streamname;
}

%define parse.trace
%define parse.error verbose

%code
{
#include "driver.hpp"
#include "scanner.hpp"
#include "ll_type.hpp"
#undef yylex
#define yylex driver.lexer->lex
}


%define api.token.prefix {TOK_}
%token
  END   0 "end of file"
  LPAREN "("
  RPAREN ")"
  SQUOT "'"
;
%token <std::string> IDENTIFIER "identifier"
%token <double> NUMBER "number"
%token <std::string> STRING "string"

%type <lisplike_value> exp
%type <lisplike_value> term
%type <std::vector<lisplike_value>> term_list

%printer { yyoutput << $$; } <*>;

%%

%start unit;

unit
  : exp unit { }
  | %empty { }
  ;

exp
  : LPAREN IDENTIFIER term_list RPAREN {  }
  ;

term_list 
  : term term_list { $2.push_back($1); }
  | %empty { $$ = std::vector<lisplike_value>(); }
  ;

term
  : exp         { $$ = $1; }
  | list        {
    /* TODO */ 
  }
  | IDENTIFIER  {
    /* TODO: resolve this to a number */ 
    /* $$ = $1; */ 
  }
  | NUMBER      { 
    $$ = $1; 
  }
  | STRING      {
      /* TODO */ 
      /* $$ = $1; */ 
    }
  ;

list
  : SQUOT LPAREN term term_list RPAREN
  ;

%%

void yy::lisplike_parser::error(const location_type& l, const std::string& m)
{
  driver.error(l, m);
}
