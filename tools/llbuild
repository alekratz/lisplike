#!/bin/bash

if [[ -z "$CC" ]]; then CC=g++; fi

function usage() {
    echo "usage: $0 [opts] file1 [ file2 ... ]"
    echo
    echo "opts:"
    echo "-o [file]                 output file"
    echo "-d [dir]                  output dir"
    echo "-h                        don't generate header"
    echo "-m                        don't generate main"
    echo "-s                        follow scanning"
    echo "-p                        follow parsing"
    echo "-v                        verbose output"
    echo "-j [jobs]                 maximum number of jobs"
}

# Check args
if [[ $# == 0 ]]; then
    usage
    exit 1
fi

gendir=.
target="a.out"
llargs=""
jobcount=1

while getopts "o:d:hmspvj:" OPT; do
    case $OPT in
        o)
            target=$OPTARG
            ;;
        d)
            gendir=$OPTARG
            ;;
        h)
            llargs="-h $llargs"
            ;;
        m)
            llargs="-m $llargs"
            ;;
        s)
            llargs="-s $llargs"
            ;;
        p)
            llargs="-p $llargs"
            ;;
        v)
            llargs="-v $llargs"
            ;;
        j)
            jobcount=$OPTARG
            ;;
        \?)
            usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND-1))
compfiles="$*"
genfiles=$(for f in $compfiles; do echo "$gendir/$(basename ${f%.*}).cpp"; done)
# make sure to include main.cpp if applicable
if [[ ! $llargs =~ "-m" ]]; then genfiles="$genfiles $gendir/main.cpp"; fi
ofiles=$(for f in $genfiles; do echo "$f.o"; done)

if [[ $# == 0 ]]; then
    usage
    exit 1
fi

echo == compiling lisp . . .
echo lisplike $llargs -d "$gendir" $compfiles
lisplike $llargs -d "$gendir" $compfiles || exit 1
echo == compiling c++ . . .
for f in $genfiles; do
    while [[ $(jobs | wc -l) == "$jobcount" ]]; do
        wait
    done
    echo "$CC" -c $f -I. -I$gendir -std=c++14 -o $f.o
    "$CC" -c $f -I. -I$gendir -std=c++14 -o $f.o || break &
done
wait
echo "$CC" $ofiles -std=c++14 -o $target
"$CC" $ofiles -std=c++14 -o "$target" || exit 1
echo == DONE
